#!/usr/bin/python -t

# Copyright (c) 2013 Vrai Stacey <vrai.stacey@gmail.com>
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2, incorporated herein by reference.

import sys

# Tested again wxPython 2.8 (stable) and 2.9 (development), don't run against
# untested versions
if not hasattr ( sys, 'frozen' ):
    import wxversion
    wxversion.select ( ( '2.8', '2.9' ) )

import argparse, base64, httplib, json, os, stat, time, urlparse
import wx, wx.html, wx.lib.newevent
from cStringIO import StringIO
from Queue import Queue, Empty
from threading import Thread

# Attempt to load in pyinotify - this is optional
try:
    import pyinotify
    _pyinotifyok = True
except ImportError:
    sys.stderr.write ( 'Cannot find pyinotify module\n' )
    _pyinotifyok = False


class LoaderThread ( Thread ):
    def __init__ ( self, fn, cb, que ):
        Thread.__init__ ( self )
        self.__fn = fn
        self.__cb = cb
        self.__que = que
        self.__alive = True

    def run ( self ):
        while self.__alive:
            try:
                ts = self._getnext ( )
                if ts:
                    res = self._process ( ts )
                    self.__cb ( res [ 0 ], res [ 1 ] )
            except KeyboardInterrupt:
                break
            except Exception, err:
                sys.stderr.write ( 'LoaderThread error: %s\n\n' % err )
                self.__cb (
                    time.time ( ),
                    '<html><body>'
                    '<h1>Github API request failed</h1>'
                    '<p>%s</p>'
                    '</body></html>' % err )

    def terminate ( self ):
        if self.__alive:
            self.__alive = False
            self.__que.put ( None )

    def _getnext ( self ):
        # If there's more than one value in the queue, consume until the last
        # one is found and return that. Is the queue is empty, block.
        ts = None
        try:
            while True:
                ts = self.__que.get_nowait ( )
        except Empty:
            if ts is None and self.__alive:
                ts = self.__que.get ( )
        return ts

    def _process ( self, ts ):
        base = self._loadbase ( )
        html = self._encode ( base )
        return ts, html

    def _loadbase ( self ):
        try:
            with open ( self.__fn, 'rb' ) as fh:
                return fh.read ( )
        except IOError, err:
            return None

    def _encode ( self, base ):
        conn = httplib.HTTPSConnection ( 'api.github.com', timeout = 16 )
        conn.connect ( )
        try:
            conn.request (
                'POST', 
                '/markdown/raw',
                base,
                {
                    'content-type' : 'text/plain'
                } )
            res = conn.getresponse ( )
            if res.status != 200:
                raise Exception, 'Error response from server: %s - %s' % (
                    res.status, res.reason )
            return res.read ( )
        finally:
            try:
                conn.close ( )
            except Error:
                pass


class FileSystemPoller ( object ):
    def __init__ ( self, cb ):
        self.__cb = cb
        self.__fn = None
        self.__timer = None
        self.__ts = -1

    @property
    def fn ( self ):
        return self.__fn

    @property
    def ts ( self ):
        return self.__ts

    @property
    def ok ( self ):
        return True

    def setFilename ( self, fn ):
        self.stop ( )
        self.__fn = fn
        self.__timer = wx.PyTimer ( self._checkFile )
        self.__timer.Start ( 1000 )

    def stop ( self ):
        if self.__timer and self.__timer.IsRunning ( ):
            self.__timer.Stop ( )
        self.__timer = None

    def destroy ( self ):
        self.stop ( )

    def _checkFile ( self ):
        try:
            ts = os.stat ( self.__fn ) [ stat.ST_MTIME ]
            if ts != self.__ts:
                self.__ts = ts
                self.__cb ( )
        except OSError:
            pass


class InotifyMonitor ( object ):
    def __init__ ( self, cb ):
        class IMEvent ( pyinotify.ProcessEvent ):
            def __init__ ( self, cb ):
                pyinotify.ProcessEvent.__init__ ( self )
                self.__cb = cb

            def process_default ( self, evt ):
                if evt.maskname not in [ 'IN_IGNORED' ]:
                    self.__cb ( evt )

        self.__wm = pyinotify.WatchManager ( )
        self.__notifier = pyinotify.ThreadedNotifier (
            self.__wm, IMEvent ( self._callback ) )
        self.__notifier.start ( )
        self.__hndls = { }
        self.__fn = None
        self.__cb = cb
        self.__ts = -1

    @property
    def fn ( self ):
        return self.__fn

    @property
    def ts ( self ):
        return self.__ts

    @property
    def ok ( self ):
        return bool ( self.__hndls )

    def setFilename ( self, fn ):
        mask = pyinotify.EventsCodes.ALL_FLAGS [ 'IN_MODIFY' ] | \
               pyinotify.EventsCodes.ALL_FLAGS [ 'IN_CREATE' ] | \
               pyinotify.EventsCodes.ALL_FLAGS [ 'IN_ATTRIB' ]

        self.stop ( )
        self.__fn = fn
        self.__hndls = self.__wm.add_watch (
            fn, mask, rec = True )

        res = self.__hndls.get ( fn )
        if res and res > 0:
            self.__ts = time.time ( )
            self.__cb ( )
        else:
            self.__hndls = { }

    def stop ( self ):
        for fn, ident in self.__hndls.iteritems ( ):
            self.__wm.rm_watch ( ident )
        self.__hndls = { }

    def destroy ( self ):
        self.stop ( )
        self.__notifier.stop ( )

    def _callback ( self, evt ):
        self.__ts = time.time ( )
        self.__cb ( )


class FileSystemMonitorFactory ( object ):
    def __init__ ( self, forcepoll ):
        self.__forcepoll = forcepoll

    def __call__ ( self, cb ):
        if _pyinotifyok and not self.__forcepoll:
            return InotifyMonitor ( cb )
        return FileSystemPoller ( cb )


class HtmlWindow ( wx.html.HtmlWindow ):
    def __init__ ( self, prnt, style ):
        wx.html.HtmlWindow.__init__ ( self, prnt, style = style )

    def OnOpeningURL ( self, typ, url ):
        if typ == wx.html.HTML_URL_PAGE:
            return wx.html.HTML_BLOCK

        # The HtmlWindow widget doesn't like loading https:// protected
        # images from Github - so switch to http://
        if typ == wx.html.HTML_URL_IMAGE:
            parts = list ( urlparse.urlparse ( url ) )
            if parts [ 0 ] == 'https':
                return urlparse.urlunparse ( [ 'http' ] + parts [ 1 : ] )

        return wx.html.HTML_OPEN


FileChangeEvent, EVT_FILE_CHANGED = wx.lib.newevent.NewEvent ( )
HtmlChangeEvent, EVT_HTML_CHANGED = wx.lib.newevent.NewEvent ( )


class MainFrame ( wx.Frame ):
    def __init__ ( self, fsmonfactory ):
        wx.Frame.__init__ (
            self, None, wx.ID_ANY, 'Testing' )
        self.__fnmon = fsmonfactory ( self._postFileChange )

        self.__que = None
        self.__load = None

        self.__fpkr = wx.FilePickerCtrl (
                self, style = wx.FLP_USE_TEXTCTRL | wx.FLP_OPEN |
                    wx.FLP_FILE_MUST_EXIST | wx.FLP_CHANGE_DIR )
        self.__html = HtmlWindow (
            self, style = wx.SIMPLE_BORDER | wx.HSCROLL | wx.VSCROLL )
        self.__sbar = wx.StatusBar ( self, style = 0 )

        refresh = wx.Button ( self, label = 'Refresh' )

        topbar = wx.BoxSizer ( wx.HORIZONTAL )
        topbar.Add ( self.__fpkr, 1, wx.EXPAND | wx.ALIGN_CENTER, 0 )
        topbar.Add ( refresh, 0, wx.LEFT | wx.ALIGN_CENTER, 4 )

        sizer = wx.BoxSizer ( wx.VERTICAL )
        sizer.Add ( topbar, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 4 )
        sizer.Add ( self.__html, 1, wx.EXPAND | wx.ALL, 4 )
        sizer.Add ( self.__sbar, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 4 )
        self.SetSizer ( sizer )

        self.Bind ( EVT_FILE_CHANGED,          self._fileChangeHandler )
        self.Bind ( EVT_HTML_CHANGED,          self._htmlChangeHandler )
        self.Bind ( wx.EVT_CLOSE,              self._closeHandler )
        self.Bind ( wx.EVT_FILEPICKER_CHANGED, self._fileSelectHandler )
        self.Bind ( wx.EVT_BUTTON,             self._refreshHandler, refresh )

        quitid = wx.NewId ( )
        self.Bind ( wx.EVT_MENU, self._closeHandler, id = quitid )

        accel = wx.AcceleratorTable ( [
            ( wx.ACCEL_CTRL, ord ( 'q' ), quitid ),
            ( wx.ACCEL_CTRL, ord ( 'w' ), quitid ) ] )
        self.SetAcceleratorTable ( accel )

        self.SetIcon ( _loadicon ( ) )

    def setFilename ( self, fn, updategui = True ):
        self.__fnmon.stop ( )
        self._destroyProc ( )

        if fn is None:
            self._idleDisplay ( )
            self.__fpkr.SetFocus ( )
            return

        self.__fnmon.setFilename ( fn )
        if not self.__fnmon.ok:
            self.__html.SetPage (
                '<html><body>'
                '<h1>Failed to create file monitor</h1>'
                '<p>Problem monitoring %s; does file exist?</p>'
                '</body></html>' % fn )
            self.__sbar.SetStatusText ( 'Failed' )
        else:
            self._idleDisplay ( )

        if updategui:
            self.__fpkr.SetPath ( fn )
            self.__html.SetFocus ( )

    def _idleDisplay ( self ):
        self.__html.SetPage ( '' )
        self.__sbar.SetStatusText ( 'Idle' )

    def _destroyProc ( self ):
        if self.__load:
            self.__load.terminate ( )
        self.__load = None
        self.__que = None

    def _postFileChange ( self ):
        evt = FileChangeEvent ( )
        wx.PostEvent ( self, evt )

    def _loaderCallback ( self, ts, html ):
        evt = HtmlChangeEvent ( ts = ts, html = html )
        wx.PostEvent ( self, evt )

    def _closeHandler ( self, evt ):
        self.__fnmon.destroy ( )
        self._destroyProc ( )
        self.Destroy ( )

    def _fileChangeHandler ( self, evt ):
        assert ( isinstance ( evt, FileChangeEvent ) )
        if not self.__load:
            self.__que = Queue ( )
            self.__load = LoaderThread (
                self.__fnmon.fn,
                self._loaderCallback,
                self.__que )
            self.__load.start ( )

        self._refreshHandler ( evt )

    def _htmlChangeHandler ( self, evt ):
        assert ( isinstance ( evt, HtmlChangeEvent ) )
        self.__html.SetPage ( evt.html )
        self.__sbar.SetStatusText ( 'Last updated %s' %
            time.strftime ( '%Y %b %d %H:%M:%S', time.localtime ( evt.ts ) ) )

    def _fileSelectHandler ( self, evt ):
        fn = self.__fpkr.GetPath ( )
        if not self.__fnmon or self.__fnmon.fn != fn:
            self.setFilename ( fn, False )

    def _refreshHandler ( self, evt ):
        if self.__que and self.__fnmon:
            self.__que.put ( self.__fnmon.ts )
            self.__sbar.SetStatusText ( 'Requesting new HTML ...' )


def _loadicon ( ):
    # This is the standard 32x20 PNG Markdown icon in base64 form
    dt = 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAUCAYAAADskT9PAAAAGXRFWHRTb2Z0d2Fy' \
         'ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAA' \
         'AAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5U' \
         'Y3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6' \
         'eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8w' \
         'Mi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRw' \
         'Oi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpE' \
         'ZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5h' \
         'ZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRv' \
         'YmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0' \
         'dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1l' \
         'bnRJRD0ieG1wLmRpZDowODgwMTE3NDA3MjA2ODExOTEwOUFEQzNCQUI2ODlCMSIg' \
         'eG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpBMTJFN0Y2NjY1QzQxMUUxODUzREE3' \
         'M0Q2QzFENEJGRSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpBMTJFN0Y2NTY1' \
         'QzQxMUUxODUzREE3M0Q2QzFENEJGRSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQ' \
         'aG90b3Nob3AgQ1M1IE1hY2ludG9zaCI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJl' \
         'ZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjA2ODAxMTc0MDcyMDY4MTE4QTZEOTRGODVF' \
         'QjcwOTYwIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjA4ODAxMTc0MDcyMDY4' \
         'MTE5MTA5QURDM0JBQjY4OUIxIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpS' \
         'REY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+CAukPAAAAN1JREFU' \
         'eNpiYGBgsAfik0D8n84YZKc9I5B4DsQSDAMDXjBCXQMCjHS2HGwvE8MAg0HrAOTE' \
         'EotFPhZNDSEzCMbFfzyavwGxFpIciP2ZCg6AyxFyAAhfBWJOKL6KRZ5sB7AQGVUg' \
         'X09DYlM9O+ALgUVYfLyInlGAHuwgNg8OC3oJlH695DgAFuzf0BIkLh8uxWH5UnJD' \
         'AAYSoJhQELMB8V40+b1QcYocQEoc8wPxGajcGSifgZ4OAAFRIN4OpXHqH62MBtwB' \
         'oGB/AsTSA2T/UxDhAW0V0btJBrLTAyDAALBwz7npOTMtAAAAAElFTkSuQmCC'
    stream = StringIO ( base64.b64decode ( dt ) )
    image = wx.ImageFromStream ( stream, wx.BITMAP_TYPE_PNG )
    icon = wx.EmptyIcon ( )
    icon.CopyFromBitmap ( wx.BitmapFromImage ( image ) )
    return icon


def _fork ( cfg ):
    # Fork process, make it a session leader and change its working directory
    # to one that's (hopefully) not going to be unmounted
    pid = os.fork ( )
    if pid:
        sys.exit ( 0 )
    os.setsid ( )
    os.chdir ( '/' )

    # Close stdin, out and err and replace them with /dev/null
    for fd in range ( 0, 3 ):
        try:
            os.close ( fd )
        except OSError:
            pass

    os.open ( os.devnull, os.O_RDWR )
    os.dup2 ( 0, 1 )
    os.dup2 ( 0, 2 )


def _getconfig ( ):
    parser = argparse.ArgumentParser ( description =
        'Converts a Github Flavoured Markdown file in to HTML - using the '
        'Github API - and displays it. The source file is monitored and '
        'will be reformatted / displayed on any change.'
        'By default a proper file notification library will be used to '
        'watch the file. However if this is not available, or it is '
        'disabled with the --poll option, the file\'s modification time '
        'will be checked once a second.' )

    parser.add_argument (
        'fn', metavar = 'FILE', type = str, nargs = '?',
        help = 'markdown file to display' )
    parser.add_argument (
        '-f', '--fork', action = 'store_true',
        help = 'fork a copy of the process in to the background and then '
               'return immediately (leaving the background process running)' )
    parser.add_argument (
        '-p', '--poll', action = 'store_true',
        help = 'always poll for file changes, even if file notification is '
               'available' )

    return parser.parse_args ( )


if __name__ == '__main__':
    cfg = _getconfig ( )
    if cfg.fork:
        _fork ( cfg )

    app = wx.App ( False )
    frame = MainFrame ( FileSystemMonitorFactory ( cfg.poll ) )
    frame.setFilename ( cfg.fn )
    frame.Show ( True )
    app.MainLoop ( )
